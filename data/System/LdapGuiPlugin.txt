%META:TOPICINFO{author="felberrobert" comment="reprev" date="1370524775" format="1.1" reprev="12" version="12"}%
---+ !LdapGuiPlugin

This plugin enables you to build a self defined LDAP GUI to ease administration by distributing certain tasks to your users over a web interface.
At the moment the interface is implemented by REST handlers which can be called on submit to modify or add LDAP entries by a self designed graphical user interface (GUI) consisting of forms.
The following chapters will explain the specification you need to satisfy and give some examples to give you a feeling how to use it. The plugin will grow over time and add new functionalities so stay tuned and read this document after each update. Of course there is an attempt to not alter the interface too much so that your forms are rendered useless after an update but there is a small chance that it could happen out of necessity.

%TOC%

---++ Requirements

For now this plugin is young and wishes to grow. It is currently developed for Linux and OpenLDAP. Hopefully the interface will grow much more abstract to provide functionality on different platforms.

There are some requirements to be fulfilled before you can begin to build your web GUI. Of course you first need a LDAP server (OpenLDAP would be a good choice) and some experience in administration. For configuration of LdapGuiPlugin it is also useful to have basic knowledge of Perl. You will see why a little bit later in the following chapters. To configure the connection settings for this plugin, you should read the chapter "LDAP questionnaire" in the description of LdapContrib. LdapGuiPlugin does not extend the LdapContrib, because it targets a slightly different goal which is to provide not only read but also write access to a LDAP server. Also the LdapContrib is already a mature contribution and works well for the tasks it targets.
So, lets get to the real requirements for the plugin to work.

---+++ Required

Perl modules you will need:
   * CPAN Net::LDAP
   * CPAN Digest

---+++ Recommended Foswiki extentions
   * FormPlugin: The FormPlugin enables you to build HTML forms with extra features and has a implementation of the foswiki REST interface. Read its description for more Information.
   * LdapContrib: It allows you to populate your foswiki userbase and groups by data which stored in a LDAP server. Read its description for more information.

Note: if you install the LdapContrib and want its settings to be used for LdapGuiPlugin you don't need to copy&paste. There is an option for that purpose.

---++ Configuration

After you fulfilled the requirements and installed the plugin it needs some configuration before you can start to use it properly. You could need a little Perl knowledge but you don't need to.
All chapters under this topic refer to settings in configure. ( http://foswiki.org/Support/InstallStepConfigureFoswiki )
Note that this configurations have deep inpact on how the plugin actually works.

---+++ Connection settings

Here you configure the way the plugin connects to your LDAP server. This part of the configuration is the same as for LdapContrib.
You need to know:
   1 The servers hostname or IP adress. Defaults to 127.0.0.1 (localhost)
   1 The port your server is listening to. Defaults to 389.
   1 Should your server use SASL for authenticate connections? (strongly recommended)
   1 Should your server use TLS for LDAPS?
   1 Do you want to use proxy users? If you do not use it, the user of the formular must connect over an own LDAP login with his/her own credentials. Of course every user needs the correct access, because the LDAP ACL will decide who is able to write in the end. These options would allow to bypass the ACL configuration for the server at least for user proxies.<br />
      * A proxy user which has access to the userbase and can modify or add entries. This will be the bind dn in place of the actual user to add or modify entries. (%RED%Don't use this - it was basically a debug feature to test functionality%ENDCOLOR%)
      * A proxy user which is able to modify groups. With this a user could add someone to a group without the need to grant him/her write access to group entries. This proxy user is slightly more safe because the interface only connects to him after an entry was successfully inserted. This means the user who added the entry to the database had the correct access rights and the entry can safely be added to a group. So because no one can bind to this user explicitly no one should be able to blindly add people to groups without permission. Also the bindn and password for this proxy is not published.

---+++++ Example

(# charaters define commentary begin)
<verbatim>
#LDAP
{Plugins}{LdapGuiPlugin}{LdapGuiServerHost} = 127.0.0.1
{Plugins}{LdapGuiPlugin}{LdapGuiPort} = 389
{Plugins}{LdapGuiPlugin}{LdapGuiServerVersion} = 3

#SASL
{Plugins}{LdapGuiPlugin}{LdapGuiUseSASL} = false
{Plugins}{LdapGuiPlugin}{LdapGuiSASLMechanism} = PLAIN CRAM-MD5 EXTERNAL ANONYMOUS
#TLS
{Plugins}{LdapGuiPlugin}{LdapGuiUseTLS} = false
{Plugins}{LdapGuiPlugin}{LdapGuiTLSSSLVersion} = tlsv1
{Plugins}{LdapGuiPlugin}{LdapGuiTLSVerify} = require
{Plugins}{LdapGuiPlugin}{LdapGuiTLSCAPath} = 
{Plugins}{LdapGuiPlugin}{LdapGuiTLSCAFile} =
{Plugins}{LdapGuiPlugin}{LdapGuiTLSClientCert} =
{Plugins}{LdapGuiPlugin}{LdapGuiTLSClientKey} =

# user proxy
{Plugins}{LdapGuiPlugin}{LdapGuiAllowProxyBind} = false
# group proxy 
{Plugins}{LdapGuiPlugin}{LdapGuiAllowProxyUser} = true
# group proxy dn
{Plugins}{LdapGuiPlugin}{LdapGuiBindDN} = cn=proxyuser,dc=my,dc=domain,dc=com
# group prody password
{Plugins}{LdapGuiPlugin}{LdapGuiBindPassword} = secret</verbatim>

---+++ GUI functionality

This section is all about the actual usage of the plugin. These settings provide information about your specific LDAP structure and how the plugin gets the login data for binding .
Here you need to know:
   1 The base dn of your LDAP. Defaults to dc=your,dc=domain,dc=com which will most likely not work for you. This is the root of your DIT where the plugin should operate.
   1 The user base/bases of your LDAP. This defaults to [ ou=people,dc=your,dc=domain,dc=com ] (This is a list!)
   1 The group base/bases of your LDAP. This defaults to [ ou=group,dc=your,dc=domain,dc=com ] (This is a list!)
   1 The login attribute of your LDAP. Defaults to uid.
   1 The group attribute of your LDAP. Defaults to gidNumber.
   1 The group member attribute of your LDAP. Defaults to memberUid.
   1 How the login schema should be organized for add and modify data. This option is crucial to be able to connect to the LDAP because the plugin will search for these formfield names to get the credentials to bind to the server. (%RED%make sure to choose names which are not LDAP attributes!%ENDCOLOR%) example: <verbatim> {
  'add' => {
             'loginName' => 'LdapLoginAttributeName',
             'loginPWD' => 'LdapLoginPasswordAttributeName'
           },
  'modify' => {
                'loginName' => 'uid',
                'loginPWD' => 'LdapLoginPasswordAttributeName'
              }
} </verbatim> this means for the LdapGuiPlugin /addData handler, the plugin searches for the fields LdapLoginAttributeName and LdapLoginPasswordAttributeName to bind against.
   1 At the moment only the uidNumber can be set automatically. So there is an option to do so. Hopefully this feature will get abstracted to be able to autoset numerical attributes.

---+++ Extended LDAP GUI functionality

These configurations are not necessary but can be useful to you. These settings have no effect until you actually use the corresponding option inside your forms, but they define what will be possible.

---++++ LdapGuiGlue

This is the configuration for the option called 'LdapGuiGlue'. You can use this option later to construct ('glue together') LDAP attributes out of form data, static strings and/or a format. (e.g.: cn = givenName + sn where givenName and sn are inside the form -&gt; cn will be "glued together" automatically)
To do so you need to configure some rules how these attributes should be 'glued together'.
Gluerules are specified to be a hash containing 2 - 4 parameter keys. Note that this specification will change because it has great potential to be both: extended and simplified.

---+++++ Necessary parameters
   * delimiter
The delimiter is bound to the specific rule, which will most likely change. For now it has the form 'delimiter' =&gt; 'STRING'

   * attributes
Attributes are regulary given as a list of attribute names. If you want to use 'hard coded' strings, you must specify which attribute name should be treated as a string through a bitmask. Normally every attribute name will be searched in the query parameters. That means there needs to be a form field with that name or a corresponding key&value pair in the request if no strings are used.
It has the form: 'attributes' =&gt; ['attributename1' , 'attributename2' , ... , 'attributenameN']

---+++++ Optional parameters
   * asString
This parameter is also given as a list and must have the same count of elements as the attributes parameter list. It is a simple true (1) false (0) bitmask which indicates if an attribute should be treated as a string and therefore shall not be searched inside query parameters.
Example for an email: 'attributes' =&gt; ['uid' , '@my.domain.com']
You dont want to search for a form field with the name '@my.domain.com' but much rather use the string itself. So the bitmask is:
 'asString' =&gt; [0,1]
(Note that numerical values don't need to be quoted)

   * formatfunctions
This parameter is a list of predefined format functions which will be applied to the constructed LDAP attribute value. At the moment there are only two functions:
   1 lowercase
   1 uppercase

---+++++ Example

We want to be able to automatically construct the LDAP attributes 'uid', 'homeDirectory' and 'cn' as follows:
   * homeDirectory
      1 The first part of the result is a string "/home"
      1 The second part is the uid which gets constructed
      1 We want an empty delimiter.
      1 homeDirectory = '/home/' + + uid
   * cn
      1 There have to be two fields named 'LdapFirstName' and 'sn' on the form.
      1 The delimiter should be a space
      1 cn = LdapFirstName + ' ' + sn
   * uid
      1 There have to be a fiel named sn on the form.
      1 It should be lowercased
      1 uid = lowercase ( sn )

For this you need the following configuration for {Plugins}{LdapGuiPlugin}{LdapGuiGlue}:
<verbatim>
  'homeDirectory' => {
                       'delimiter' => '',
                       'asString' => [
                                       1,
                                       0
                                     ],
                       'attributes' => [
                                         '/home/',
                                         'uid'
                                       ]
                     },
  'cn' => {
            'delimiter' => ' ',
            'attributes' => [
                              'LdapFirstName',
                              'sn'
                            ]
          },
  'uid' => {
             'formatFunctions' => [
                                    'lowercase'
                                  ],
             'delimiter' => '',
             'attributes' => [
                               'sn'
                             ]
           }</verbatim>

Note:
   * the order in which you give the definition of the 'glue rules' for the LDAP attributes is not important.
   * You should not construct cyclic rules (e.g.: A = B+C, B = A+C, C='oh oh' ).
   * The attribute which gets constructed will get ignored even if you have a form field with the same name (e.g. there is no form field 'uid' needed and it would be ignored)
   * 'asString' is a bitmask.

Now you specified that the function LdapGuiGlue can be used in a form to construct the LDAP attributes uid, homeDirectory and cn. This means for example that if you want to generate the uid you just need to define a form field 'sn'. Now your form must only send the information that the uid should get constructed by inserting:
   * <verbatim><input type="hidden" name="LdapGuiGlue" value="uid"/></verbatim> for simple html or
   * <verbatim>%FORMELEMENT{
   name="LdapGuiGlue"
   type="hidden"
   value="uid"
}%</verbatim> for the FormPlugin

---++ Specification

LdapGuiPlugin gives you just an interface for your own GUI on Foswiki. This is implemented by a set of REST handlers.
When you design forms for the GUI, you design the queries which the LdapGuiPlugin will process. These queries need a form so that LdapGuiPlugin can handle them to build reasonable entries out of the data the query holds. Also of course the access configuration of the LDAP server should be suitable. A form could be perfectly serve your needs, but if the users can't change anything because of the LDAP ACLs this plugin can't do magic. (well you could bypass it by a proxy user but this is suicide)

---+++ Form

The goal of the plugin is to perform LDAP actions preferably by a form submit. It is also possible to invoke an action by a request URL, but this approach may be too troublesome. Therefore you must know how the form should look like and what content it represents.

   * Your form has a type which indicates the action the plugin will perform by the defined formdata(add, modify, ...). This means the plugin needs to know some of the semantics of your form to process the data correctly. Therefore use what you need by calling one of the currently available REST handlers:
      * LdapGuiPlugin /addData when your form adds a new entry
      * LdapGuiPlugin /modifyData when your form modifies and existing entry
      * LdapGuiPlugin /moveEntry when you want to move an entry for example from one subtree to another %RED% not yet available %ENDCOLOR%
   * The REST handler must be called on submit with the formfield data as parameters
   * Use the POST method

---+++ Form fields
   * A formfield which represents a LDAP attribute must have the same name as the LDAP attribute. (LDAP attribute: sn =&gt; form field name = sn) Otherwise the plugin will not recognize it.
   * Also the attribute you wish to use needs to be defined by the LDAP schema.
   * Any other attribute, which is not known by the LDAP schema gets ignored. This is not the case if and only if the form field name represents an option, or is used explicitly by an option.
   * LDAP attribute names are case insensitive and so are form field names.
   * There are no explicit checks if the attribute is able to have multiple values at the moment. If one does not pay attention to that fact the plugin may fails. For example if your form tries to submit multiple values for the attribute 'gidNumber' which is defined single valued.

---+++ Option fields

LdapGuiPlugin comes with a set of possible options which are able to influence the workflow of LdapGuiPlugin. Options are simply form fields with a special name and a value. The easiest approach to use an option is to create a hidden input tag.
The following subchapters will show which option you can use for which form type and what they do.
---++++ For all form types available
---+++++ LdapGuiGlue

If you read the chapter above you already know how to configure the LdapGuiGlue functionality. It is defined that this function does not apply itself automatically for all forms, because is could be the case one want to construct a form where every attribute should get typed in. Therefore you need to insert an option field into your form which tells the plugin to cunstruct a certain set of attributes. Therefore you even saw an example already. To remember you:
   * <verbatim><input type="hidden" name="LdapGuiGlue" value="uid"/></verbatim> for simple html or
   * <verbatim>%FORMELEMENT{
   name="LdapGuiGlue"
   type="hidden"
   value="uid"
}%</verbatim>
By that single option field you now tell the plugin to cunstruct the uid out of existing attributes. In the example cunfiguration above this happens by building it out of the 'sn' form field. (which you need to define of course)

---+++++ LdapGuiHashAttribute

The plugin comes with the ability to store hashes inside the LDAP. This comes in handy if you want to store hashed passwords which enable users to log in over LDAP. The plugin supports the following types of hashes:
   * SHA
   * SSHA
   * Crypt
   * MD5
   * SMD5

At the moment the resulting hashes have the same structure as if generated by slappasswd so that they can be used to log in users.
Note that this option has a slightly different syntax which must be followed. For each attribute you want to hash, you need to insert an own option field with the name 'HASHME'. The value must start with the attribute name which you wish to be hashed, followed by '=' and ending with a comma seperated list of hash types to be stored. Note that you should not try to store multiple hashes in attributes which are single valued. To give a example:
You want to store the inputs for the userPassword form field as hashes. You want to use CRYPT, SHA, SSHA, MD5 and SMD5. The resulting option field is:
<verbatim>%FORMELEMENT{
   name="HASHME"
   type="hidden"
   value="userPassword=sha,ssha,smd5,md5,crypt"
}%</verbatim>

Everything is case insensitive. If for example a user of your form types in the  value 'abcd12AB' as a password the stored values could be:
<verbatim>
userPassword: {SHA}2Ky05bDZLtah6bEXwMtPd1ZeUD0=
userPassword: {SSHA}UJvDy13UQpqPedUIXdPP8whJF8vFbTa6
userPassword: {SMD5}S5Ze1/Ort25FiqSGyBaUemFiY2Q=
userPassword: {MD5}+fcj3ntVthYOpNtHyyu8IQ==
userPassword: {CRYPT}nw37xSELAvmTI</verbatim>

   * LdapGuiAddToUserBase

---+++ Option fields

---++++ Example using FormPlugin
<verbatim>
%STARTFORM{
   name="Mitarbeiterformular"
   action="rest"
   method="post"
   validate="on"
   restaction="LdapGuiPlugin/modifyData"
   redirectto="%BASEWEB%.%BASEUSERTOPIC%"
}%

%FORMELEMENT{
   name="LdapAttributeName (for example: cn or CN oder cN..)"
   title="describing title"
   type="type (e.g.: select, textfield...)"
   value=""
   mandatory="off"
   hint="<br/>Here you can describe what a use should or must do the possibilities are endless, FormPlugin can even validate the input before a submit."
}%
---++ LDAP Login
You must use a seperate LDAP login. There should be not many different cases how a login has to look like. Name and password must be given to let the plugin verify the identity of the user. Also the plugin needs a uid and a password to bind against.<br /> If you want to know why the name for password is not 'userPassword' read the description to configuration chapter: LdapUserLogin
%FORMELEMENT{
   name="uid"
   title="Your ldap login name"
   type="text"
   value=""
   validate="required"
}%
%FORMELEMENT{
   name="LdapLoginPasswordAttributeName"
   title="Your ldap password"
   type="password"
   validate="required"
   value=""
}%

%FORMELEMENT{
   name="action"
   type="submit"
   buttonlabel="Submit"
}%
%ENDFORM%</verbatim>

---++ Trigger API

It should be possible for specific actions to trigger workflow scripts which deal with associated data after it was successfully written to the LDAP.
At the moment there are 3 possible solutions:
   * Use a suitable LDAP backend. For slapd there are backends like slapd-sock, slapd-perl or slapd-shell which can be used.
   * If you do not need an instant trigger you could use a cron-job solution with searches.
   * You use a HTTP daemon which communicates directly with LdapGuiPlugin.
The trigger API for LdapGuiPlugin does exactly what is described in the third item. It offers a small handy interface to trigger a HTTP daemon after a LdapGuiPlugin request succeeded.
By that you are not bound to the apache user and you are able to let the LdapGuiPlugin trigger scripts from the outside on another access level. Of course this will make your system less safe this functionality comes with a risk.

---+++ Workflow of the trigger API
---+++ Cross Site Request Forgery (CSRF)

One of the dangers is CSRF. This means an attacker would just need to build an own form with malicious form fields and trick a users with adequate priviliges into submitting this form while the user is logged in.

The trigger API tries to prevent this by showing best practises for configuration of the plugin and by defining how the daemon should work like.
---++++ Trigger configuration
---++++ Daemon spec
---+++ Usage
---+++ LdapGuiPlugin - Daemon API

LdapGuiPlugin has a small API which can be used to trigger events based on LDAP.

---++ LdapGuiPlugin defined Macros

The plugin comes with a small set of macros to support e.g. the FormPlugin or display of data.
---+++ LdapGetAttribute

If you use {UserMappingManager} = Foswiki::Users::LdapUserMapping this macro will fetch the desired attribute for the user who is authorized over the LDAP.
For example if you want to display a users common name (cn) use:
<verbatim>%LDAPGETATTRIBUTE{attribute="cn"}%</verbatim>

If you don't use the LdapUserMapping, or a user has not the access to the attribute, or some other issue prevented the macro to succeed, it will return nothing.

---+++ JSONRegexp

This macro escapes regular expressions which appear inside a JSON string so the regular expression does not break JSON by illegal escape sequences.

usage (inside a JSON string):
<verbatim>%JSONREGEXP{regexp="/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{8,75}$/"}%</verbatim>

---++ Security and safety precautions

Because this plugin offers the ability to distribute certain subsets of administrative tasks, it needs to have write access to the LDAP DIT. For that reason it must provide security mechanisms. Furthermore the foswiki and LDAP server administrators need to be careful while configuring the plugin and access controls of the LDAP.  In this section you will find descriptions of how the plugin tries to enforce basic security and what an LDAP administrator should do to prevent abuse of functionality.

---++ More Examples

%RED%(PLANNED)%ENDCOLOR%

   * Set SHORTDESCRIPTION = Interface for building a form based LDAP GUI over Foswiki

---++ Plugin Info

|  Plugin Author: | Foswiki:Main.RobertFelber |
|  Copyright: | ? 2013, Robert Felber |
|  License: | GPL ( [[http://www.gnu.org/copyleft/gpl.html][GNU General Public License]]) |
|  Release: | %$RELEASE% |
|  Version: | %$VERSION% |
|  Change History: | <!-- versions below in reverse order --> |
|  5 March 2013: | Initial version |
|  Foswiki Dependency: | $Foswiki::Plugins::VERSION 1.1 |
|  CPAN Dependencies: | none |
|  Other Dependencies: | none |
|  Perl Version: | 5.006 |
|  Plugin Home: | none |
|  Feedback: | none |
__Related Topics:__ [[System.Plugins][Plugins]], %SYSTEMWEB%.DeveloperDocumentationCategory, %SYSTEMWEB%.AdminDocumentationCategory, %SYSTEMWEB%.DefaultPreferences&lt;/verbatim&gt;&lt;/verbatim&gt;
